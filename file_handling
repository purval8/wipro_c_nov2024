/*
File handling in C refers to the ability to create, read, write, and manipulate files through the use of standard library functions. In C, file operations are managed by the standard input/output library <stdio.h>. File handling enables the program to interact with external data, store information, and retrieve it across multiple runs of the program.

File Handling Functions in C
Opening a File:

You use the fopen() function to open a file. This function takes two arguments:
The name of the file.
The mode (how you want to open the file).
The function returns a FILE * (a pointer to a FILE structure), which is used to refer to the opened file. If the file cannot be opened, it returns NULL.

Syntax:

c
Copy code
FILE *fopen(const char *filename, const char *mode);
File Modes:

"r": Open for reading. The file must exist.
"w": Open for writing. If the file exists, it is overwritten; if it doesn't, a new file is created.
"a": Open for appending. Data is added at the end of the file.
"r+": Open for reading and writing. The file must exist.
"w+": Open for reading and writing. If the file exists, it is overwritten; if it doesn't, a new file is created.
"a+": Open for reading and appending. The file is created if it doesn't exist.
Closing a File:

Once you're done with file operations, close the file using the fclose() function.
Syntax:

c
Copy code
int fclose(FILE *fp);
If the file is successfully closed, it returns 0; otherwise, it returns EOF.

Reading from a File:

You can use various functions to read from a file:
fgetc(): Reads a single character from the file.
fgets(): Reads a line of text (up to a specified number of characters) from the file.
fread(): Reads binary data from the file.
Writing to a File:

To write to a file, you can use:
fputc(): Writes a single character to the file.
fputs(): Writes a string to the file.
fprintf(): Writes formatted output to the file.
fwrite(): Writes binary data to the file.
Error Handling:

You can use feof() to check for the end of file and ferror() to check if an error occurred during a file operation.
Example: Basic File Operations in C
1. Writing to a File
c
Copy code
#include <stdio.h>

int main() {
    FILE *file = fopen("example.txt", "w");  // Open file in write mode

    if (file == NULL) {
        printf("Error opening file!\n");
        return 1;  // Exit if the file can't be opened
    }

    fprintf(file, "Hello, world!\n");  // Write text to file
    fputs("This is an example of file handling.\n", file);  // Another way to write to file

    fclose(file);  // Close the file
    printf("File written successfully.\n");

    return 0;
}
Explanation:

fopen("example.txt", "w"): Opens (or creates) a file named example.txt in write mode.
fprintf(file, "Hello, world!\n"): Writes a formatted string to the file.
fputs("This is an example..."): Writes a string to the file without formatting.
fclose(file): Closes the file to save changes and free resources.
2. Reading from a File
c
Copy code
#include <stdio.h>

int main() {
    char buffer[255];
    FILE *file = fopen("example.txt", "r");  // Open file in read mode

    if (file == NULL) {
        printf("Error opening file!\n");
        return 1;
    }

    while (fgets(buffer, sizeof(buffer), file)) {  // Read each line
        printf("%s", buffer);  // Print the line read from the file
    }

    fclose(file);  // Close the file
    return 0;
}
Explanation:

fgets(buffer, sizeof(buffer), file): Reads a line from the file into buffer.
printf("%s", buffer): Prints the content of buffer to the screen.
3. Binary File Operations
You can also read and write binary data using fread() and fwrite() functions.

c
Copy code
#include <stdio.h>

struct Person {
    char name[50];
    int age;
};

int main() {
    struct Person p1 = {"John Doe", 30};

    // Write to binary file
    FILE *file = fopen("person.dat", "wb");  // Open for binary write
    if (file == NULL) {
        printf("Error opening file!\n");
        return 1;
    }
    fwrite(&p1, sizeof(struct Person), 1, file);
    fclose(file);

    // Read from binary file
    struct Person p2;
    file = fopen("person.dat", "rb");  // Open for binary read
    if (file == NULL) {
        printf("Error opening file!\n");
        return 1;
    }
    fread(&p2, sizeof(struct Person), 1, file);
    fclose(file);

    printf("Name: %s\nAge: %d\n", p2.name, p2.age);
    return 0;
}
Explanation:

fwrite(&p1, sizeof(struct Person), 1, file): Writes the struct Person to a binary file.
fread(&p2, sizeof(struct Person), 1, file): Reads the binary data back into a struct Person.
Important Functions for File Handling
Function	Description
fopen()	Opens a file and returns a file pointer.
fclose()	Closes an open file.
fgetc()	Reads a single character from a file.
fgets()	Reads a line of text from a file.
fputc()	Writes a single character to a file.
fputs()	Writes a string to a file.
fprintf()	Writes formatted output to a file.
fread()	Reads binary data from a file.
fwrite()	Writes binary data to a file.
feof()	Checks if the end of file has been reached.
ferror()	Checks if a file error has occurred.
Error Handling in File Operations
Always check if the file was opened successfully by testing if the file pointer is NULL.
Use feof() to check if you have reached the end of the file.
Use ferror() to check if an error occurred during a file operation.
Conclusion
File handling in C is essential for persistent data storage. By using the provided functions, you can perform operations like reading and writing both text and binary files. Careful error handling is essential to ensure that the file operations are carried out successfully, and resources are freed by closing the file once done.



*/